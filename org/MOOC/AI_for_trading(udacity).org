#+TITLE: AI for Trading
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com

* Trading Strategies
** Types of Trading Strategies
   1. Single Asset Strategies
   2. Pairwise Strategies
   3. Cross-sectional Strategies(statistical arbitrage, market neutral investing): use group of assets
   4. Alternative Data Based Strategies: Satellite Imagery, Social Media, Geolocation, Consumer Transaction Data

   Large hedge funds are most interested in 3 and 4, large hedge funds seek:
   - High capacity -> 3
   - New, different ideas -> 4
     - Hedge funds hope to uncover signals in hard-to-find, expensive and difficult to work with data.

** Cross-sectional Strategy
*** Process of Cross-sectional Strategies
   [[../resources/MOOC/Trading/cross_sectional.png]]


*** Alpha Research Flow
   1. Observation: Find a pattern that seems to be recurring in the market over time.
   1. Turn the observation into Alpha(an expression), both mathematically and programmatically.
   1. (Alpha Combination: To combine several Alphas into an overall Alpha).
      - Important step in modern markets
      - Try to combine *different* inputs: e.g. Momentum alpha + Fundamental alpha
   1. Use historical data to verify it.
   1. Define strategy in more detailed manner, then run full backtesting exercises.


   Videos: [[https://youtu.be/cnJK8c2zfq4][Part1]] [[https://youtu.be/v3w4JZKQixc][Part2]] [[https://youtu.be/vSxnkduTWWY][Part3]]

*** Momentum Strategy Example
   1. Choose a stock universe (attention: avoid *Survivorship Bias*)
   1. Re-sample prices if needed, then compute log returns.
   1. Rank by returns, select top-n/bottom-n(cross-sectional analysis)
   1. Compute long and short portfolio returns
   1. Combine portfolio returns

** Statistical Analysis for Returns
   - Sample Monthly Mean Return: $\bar{x}$
   - t-statistic: $t=\frac{{\bar{x}-\mu_0}}{SE}=\frac{\bar{x}}{SE}$ (if the true mean month return $\mu_0$ is 0)
   - $H_0$: $\mu=0$
   - $H_A$: $\mu>0$
   - If *P-Value* $\le\alpha$ level, then reject $H_0$.

* Data Processing
** Outliers
   Sources of outliers:
   - Fat Finger Errors
   - Data Errors: missing value, 0s, duplicate values...(could check if volume was 0)
   - Earnings, mergers and other announcements

*** Spotting Outliers in Raw Data
    - Screen the data
    - Rule-based searching and filtering methods. Examples:
      - percent change thresholds (but will yield many false positives)
      - can use volume information to improve the accuracy of the filter

*** Handling Outliers in Raw Data
    - *Cross check with another data source*
    - Minimize false positives
    - Decide how to deal with data values are missing
    - May keep the missing data, especially when they represent a real non-tradable event.

*** Spotting Outliers in Signal Returns
    - Look at the return distribution (skeptical when it's too good)
    - Compare return distribution to the normal distribution using *QQ Plots*
      - A good quant should try to understand the cause of outliers and returns.
      - Check the dates and stocks that causes the difference.

*** Handling Outliers in Signal Returns
    - Case1: Data error from venders
      - fix it by replacing with correct data from other venders
      - try to determine if the result will be greatly affected if the data is replaced by any reasonable value.
    - Case2: Due to legit market events
      - exclude small market cap assets (they're hard to predict)
    - Case3: Earnings, announcements
      - check if you can pause before these events
      - try to avoid losing money when you can't pause before the event

*** Ways to Reduce Effect of Outliers
    - Moving Windows: But signals may be generated with a slight delay depending on the window size.
    - Use average prices of many stocks or even entire sector or index.
    - (Optional) May incorporate Bayesian methods or machine learning into outlier detection.

*** Filtering Decision Example
    Stock prices are volatile during market crashes. Two ways to handle:
    - Including the data during these periods
      - the results will be highly skewed.
      - the signals won't perform optimally on normal trading days.
    - Not including these data
      - When the event happens, the signal may perform really poorly.
      - To establish *stop loss levels* thresholds to prevent further losses.

** Testing for Normality
*** Why to Check If the Data is Normal?
    When we use statistical models such as regression. We use hypotheses tests to check if we can trust the model parameters of the model.
    These tests assume that our data is normally distributed.
    If our data is not normally distributed, these tests tend to tell us the model is valid when in fact it is not.

*** Box Plot
   - Use *Boxplot* to check for *symmetry*.
   [[../resources/MOOC/Trading/boxplot_of_normal_distribution.png]]

*** QQ Plot
    Quantile-Quantile Plot. Common quantiles are:
    - Quartiles: 4 groups
    - Deciles: 10 groups
    - Percentiles: 100 groups
    #+begin_src python
      import matplotlib.pyplot as plt
      from scipy.stats import gamma
      data = gamma.rvs(a=5, size=10000)
      stats.probplot(data, dist="norm", plot=plt)
      plt.show()
    #+end_src
   [[../resources/MOOC/Trading/qq_plot.png]]

*** Single Number Testing (cutoff point)
    - Shapiro-Wilk Test ~stats.shapiro~: $H_0$ - data is normally distributed
    - D'Agostino-Pearson Test: $H_0$ - data is normally distributed
    - Kolmogorov-Smirnov Test: $H_0$ - given two distribution, they are the same.
      #+begin_src python
	from scipy import stats
	sample = stats.lognorm.rvs(s=0.5, loc=0.0, scale=1.0, size=1000)
	normal_args = (sample.mean(), sample.std())
	result = stats.kstest(sample, "norm", normal_args)
	assert result.pvalue < 0.05
      #+end_src

** Testing for Stationary
   - Stationary :: The /mean/, /variance/, /covariance/ are the same over time. In particular, we want to check if the variance of data is stable over time.
   - Homoscedasity :: Terminology for constant variance over time.
   - Heteroskedasticity :: Terminology for a changing variance over time.

*** Breusch-Pagan Test
    To check if the data is Homoscedasity or Heteroskedasticity.
    - $H_0$: The data is Homoscedasity.
    - $pvalue\le 0.05$: The data is Heteroskedasticity.(with 95% confidence)

    #+begin_example
    One Use Case:
    It takes the residuals from a regression, and checks if they are dependent upon the
    independent variables that we fed into the regression.

    The test does this by performing a second regression of the residuals against the
    independent variables, and checking if the coefficients from that second regression
    are statistically significant (non-zero). Thus, the data is likely heteroscedastic.
    #+end_example
    #+begin_src python
      from statsmodels.stats.diagnostic import het_breuschpagan
      result = het_breuschpagan(residuals, independent_vars)
      result.f_pvalue
    #+end_src

** Transform into Normality & Stationary
   - Use ~log~ function to get more normal data
   - Use $ln(p_{t}/p_{t-1})$ to get more homosceedastic data.
*** Apply Box-Cox Transformation
    $$T(x)=\frac{x^{\lambda}-1}{\lambda}$$
    - $\lambda$ is a constant value you can choose
    - inputs: any dataset
    - outputs: more normally distributed dataset
    - $T(x)=\ln(x)$ if we choose $\lambda=0$

** Regression
   To use one or more *independent* variables to predict a *dependent* variable. The regression is
   used to see how two assets move in relation to each other, e.g. Statistical Arbitrage.

*** Linear Regression
    Say $y$ depends on $x$
    $$y=\beta x + \alpha$$
    - $\beta$ is coefficient
    - $\alpha$ is intercept
    [[../resources/MOOC/Trading/linear_regression.png]]
    - Residuals(error terms): differences between the best fit regression line at each point.
      - $residuals=y_{actual}-y_{predicted}$
      - if residuals are not normally distributed, this gives us a hint that the model has a bias in its prediction errors. One way to improve is to use *Multiple Regression*.
    [[../resources/MOOC/Trading/residuals.png]]

    #+begin_src python
      from sklearn.linear_model import LinearRegression

      def regression_slope_and_intercept(xSeries, ySeries):
	  """
	  xSeries: pandas series, x variable
	  ySeries: pandas series, y variable
	  """
	  lr = LinearRegression()

	  xVar = s1.values.reshape(-1,1) # reshape to 2D numpy array
	  yVar = s2.values.reshape(-1,1)

	  lr.fit(xVar, yVar)

	  slope = lr.coef_[0][0]
	  intercept = lr.intercept_[0]

	  return (slope, intercept)
    #+end_src

*** Multiple Regression
    $$y=\sum_{i=1}^{n}\beta_{i}x_{i} + \alpha$$

*** Multivariate Multiple Regression
    Use more than one independent variables to predict more than one dependent variables.
    $$y_1=\sum_{i=1}^{n}\beta_{1i}x_{1i} + \alpha_1$$
    $$y_2=\sum_{i=1}^{n}\beta_{2i}x_{2i} + \alpha_2$$

*** Evaluating the Model
    - R-squared ($R^2$) metric: range from 0 to 1. R-squared is 1 means all the variation in the dependent variable can be explained by all the variation in the independent variable
    - Adjusted R-squared: to find the minimum combination of independent variables that are most relevant for our model.
    - F-test: checks whether coefficients and intercepts are not zero, therefore the model describes a meaningful relationship.
      - $H_0$: parameters are zero.
      - $pvalue\le 0.05$: parameters are not zero.

*** Pros and Cons
    - Pros
      - a tool to analyze time-series data
      - a fundamental building block of neural network
    - Cons
      - Regression is sensitive to some choice you make about the model. For instance, how much historical data we choose to use in the model.
      - Regression is sensitive to *outliers* in the data. As it adds more noise to the trading data.

* Insights
** Why Invest in Complex Black-box Models?
   - risk the black box nature of the model in order to get access to *new* or *different* forecasts
     - pure AI-based strategies with exceptional performance
     - high Sharpe ratio high frequency algorithms

* Quant Workflow
  1. An initial hypothesis: an idea for a way to profit from trading.
     - How? The more you know about the markets, the more likely you are able to come up with a potentially profitable idea.

  1. Preliminary research and testing: in a fairly basic way, quickly test, determine:
     - *Signal* or *Alpha*
     - What assets to buy/sell at what time
  1. Detailed research and testing, and *backtesting*, to determine:
     - How to spend money
     - How to make trades
     - What conditions to exit positions
     - Risk constraints

* Stars
  - Lesson 8
    - [[https://youtu.be/O7c6bPXBUsU][1. Designing a Trading Strategy]]
    - [[https://youtu.be/TCOFgM-hxkQ][4. Long and Short Positions]]
    - [[https://youtu.be/rrCHC20FkIc][6. Trading Strategy]]
  - Project1 Trading with Momentum
    - [[https://youtu.be/8Hna_hR_N7c][4. Insights from a Quant]]
  - Lesson 12
    - [[https://youtu.be/Sa1MJegyYf][6. Testing for Normality]]
    - [[https://youtu.be/N8Fhq8wiQZU][10. Transforming Data]]
    - [[https://youtu.be/GRY4eakMBJ8][11. Linear Regression]]
