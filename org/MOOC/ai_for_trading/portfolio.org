#+TITLE: Portfolio
#+OPTIONS: H:3 toc:2 num:2 ^:nil
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
* Cumulative Returns
  Two ways to calculate cumulative returns
** Using Returns
   #+begin_src python
     returns = prices / prices.shift(1) - 1
     returns = returns.fillna(0) # opntional
     cum_returns = (returns + 1).cumprod()
     cum_return = cum_returns.iloc[-1] - 1
   #+end_src

** Using Log Returns
   #+begin_src python
     import numpy as np
     log_returns = np.log(prices) - np.log(prices.shift(1))
     log_returns = log_returns.fillna(0) # optional
     cum_log_returns = log_returns.cumsum()
     cum_return = np.exp(cum_log_returns.iloc[-1]) - 1
   #+end_src

* Relative Returns
  - Fund Returns - Benchmark Returns
  - For Active Fund: *Active Returns*
  - For Passive Fund: *Tracking Error*

** Tracking Error
   Operationalize the tracking error.
   #+begin_src python
     import numpy as np
     excess_returns = portfolio_returns - benchmark_returns
     daily_tracking_errors = excess_returns.std(ddof=1)
     annualized_tracking_error = np.sqrt(252) *  daily_tracking_errors
   #+end_src

* Absolute Returns
  - Benchmark: Cash Interest Rate e.g. US Treasury, LIBOR
  - Because the benchmark is relatively small, Hedge funds are evaluated by their performance alone.

* Covariance Matrix
  $$P=\begin{bmatrix}
  Cov(r_A, r_A) & Cov(r_A, r_B) \\
  Cov(r_B, r_A) & Cov(r_B, r_B)
  \end{bmatrix}$$

  covariance is:
  $$\begin{align*}
  Cov(r_A, r_B) &= E[(r_A-\bar{r_A})(r_B-\bar{r_B})] \\
  & = \frac{1}{n-1}\sum_{i=1}^n(r_{Ai}-\bar{r_A})(r_{Bi}-\bar{r_B}) \\
  & = \frac{1}{n-1}\sum_{i=1}^{n}r_{Ai}r_{Bi}\text{ (if }\bar{r_A}=\bar{r_B}=0\text{)} \\
  & = \frac{1}{n-1}\boldsymbol{r}_A^T \boldsymbol{r}_B
  \end{align*}$$

  $$\boldsymbol{r}^T\boldsymbol{r} = \begin{bmatrix}
  \cdots & \boldsymbol{r}_A & \cdots \\
  \cdots & \boldsymbol{r}_B & \cdots \end{bmatrix}\begin{bmatrix}
  \vdots & \vdots \\
  \boldsymbol{r}_A & \boldsymbol{r}_B \\
  \vdots & \vdots\end{bmatrix} = \begin{bmatrix}
  \boldsymbol{r}_A^T \boldsymbol{r}_A & \boldsymbol{r}_A^T \boldsymbol{r}_B \\
  \boldsymbol{r}_B^T \boldsymbol{r}_A & \boldsymbol{r}_B^T \boldsymbol{r}_B \\
  \end{bmatrix}
  $$

  So if each vector of observations in your data matrix has mean 0, the covariance matrix is:
  $$\frac{1}{n-1}\boldsymbol{r}_T\boldsymbol{r}$$

* Sharpe Ratio
** Efficient Frontier
   [[../../resources/MOOC/Trading/efficient_frontier.png]]
   - The portfolios on the efficient frontier are known as market portfolios.

** Capital Market Line
   [[../../resources/MOOC/Trading/capital_mkt_line.png]]
   - $r_f=0.03$ $\sigma_f\approx0$
   - Risk-free rate: normally refers to the rate of return on a three month treasury bill as the risk-free rate.
   [[../../resources/MOOC/Trading/mkt_risk_premium.png]]
   - Market Risk Premium :: The difference between the market return and the risk-free rate.
   - Sharpe Ratio :: is just the slope of the line which is $\frac{\bar{r}_M - r_f}{\sigma_M}$.

** Portfolio Return $\bar{r}_P$
   [[../../resources/MOOC/Trading/portfolio_return.png]]
   - Choose the $\sigma_P$.
     - Choose the weights on the risk-free asset and the market portfolio.

** Sharpe Ratio
   The Sharpe ratio is the *ratio of reward to volatility*.
   $$Sharpe=\frac{r_P-r_f}{\sigma_{excess\ return}}$$

*** Sharpe Ratio Over a Period of Time
    Risk premium(excess return) $D_t=r_{P, t} - r_{f, t}$
    $$D_{avg}=\frac{\sum_{t-1}^T D_t}{T}$$
    $$\sigma_D=\sqrt{\frac{\sum_{t=1}^T (D_t-D_{avg})^2}{T-1}}$$
    $$Sharpe=\frac{D_{avg}}{\sigma_D}$$

*** Annualized Sharpe Ratio
    $$Sharpe_{year}=\sqrt{252}Sharpe_{day}$$

* Other Risk Measures
** Semi-Deviation
   Semi-deviation measure of risk is to measure downside risk specifically, rather than any kind of volatility.
   Semi-deviation is calculated in a similar way as standard deviation, except it only includes observations that are less than the mean.
   $$SemiDeviation=\sum_{t=1}^n(r_i-\mu)^2\times I_{r_i<\mu}$$
   Where $I_{r_i<\mu}$ equals 1 when $r_i<\mu$, and 0 otherwise.

** VaR(Value-at-Risk)
   VaR is defined as the maximum dollar amount expected to be lost over a given time horizon at a predefined confidence level.

   For example, if the 95% one month VaR is $1 million
   - there is 95% confidence that the portfolio will not lose more than $1 million next month.
   - or there is a 5% chance of losing $1 million or more next month.

   more on [[https://en.wikipedia.org/wiki/Value_at_risk][WikipediA]]

   [[../../resources/MOOC/Trading/var-diagram.jpg]]

* CAPM
  The Capital Assets Pricing Model, pronounced “cap M”.

  The CAPM is a model that describes the relationship between *systematic risk* and *expected return for assets*.
  The CAPM assumes that the excess return of a stock is determined by the market return and the stock’s relationship
  with the market’s movement.

  For a stock, the return of stock $i$ equals the return of the risk free asset plus $\beta$ times the difference
  between the market return and the risk free return. $\beta_i$ is the covariance of stock $i$ and the market divided
  by the variance of the market.

  $$r_i-r_f=\beta_i\times(r_m-r_f)$$
  - $r_i$: stock return
  - $r_f$: risk free rate
  - $r_m$: market return
  - $\beta_i=\frac{cov(r_i, r_m)}{\sigma_m^2}$: describes which direction and by how much a stock or portfolio moves relative to the market.
  - When $\beta_i$ is greater than 1, stock /i/ moves up and down more than the market.

** Compensation to Investors
   - Time value of money: represented by the risk free return.
   - Risk exposure to the market: $\beta_i\times(r_m-r_f)$

** Security Market Line
   The Security Market Line is the graphical representation of CAPM and it represents the relation between the risk and return of stocks.
   Note that the x-axis is $\beta$.

   [[../../resources/MOOC/Trading/security_market_line.png]]

** Example
   Given $r_f=2%$, $\beta_i=1.2$, $r_m=10%$
   $$r_i=r_f+\beta_i\times(r_m-r_f)=11.6%$$

* Optimization
** Basics
*** One Variable Function $f(x)$
    - Finds the point $x_0$ where $f'(x)=0$
    - $x_0$ is the local maximum if $f''(x)<0$, or the local minimum if $f''(x)>0$
    - inconclusive if $f''(x)=0$

*** Two Variable Function $f(x, y)$
    *Hessian matrix* of second-order partial derivatives:
    $$H(x, y)= \begin{pmatrix}
    f_{xx}(x, y) & f_{xy}(x, y) \\
    f_{yx}(x, y) & f_{yy}(x, y)
    \end{pmatrix}$$

    *Determinant* of a matrix
    $$det\begin{pmatrix}
    a & b \\
    c & d
    \end{pmatrix} = ad - bc$$

    - if $det(H)(a, b)>0$ and $f_{xx}(a, b)>0$ then $(a, b)$ is a local minimum of f.
    - if $det(H)(a, b)>0$ and $f_{xx}(a, b)<0$ then $(a, b)$ is a local maximum of f.
    - if $det(H)(a, b)<0$ then $(a, b)$ is a saddle point of f.
    - if $det(H)(a, b)=0$ then the second derivative test is inconclusive, and the point
      $(a, b)$ could be any of a minimum, maximum or saddle point.

** Terminologies
   - Domain :: all constraint functions are defined.
   - Feasible Set :: The set of points that satisfy all the constraints.
   - Unbounded :: An optimization problem where in the objective reaches positive/negative infinity for points in the feasible set.

** Convex
   An important type of optimization problems.
   - The *objective function* and *inequality constraints* are convex.
   - A convex function curves upward everywhere.
   - Only has one minimum/maximum. i.e. local minimum is the globally optimal value.

*** Example: Minimum Portfolio Variance
    - Objective Function
      $$\sigma_P^2=w_A^2\sigma_A^2 + w_B^2\sigma_B^2+2w_A w_B\sigma_A\sigma_B\rho_{r_A r_B}$$
    - Constraints
      $$w_A+w_B=1$$
    - Solving the Problem
      $$\frac{d(\sigma_P^2)}{dw_A}=0$$
      ...
      $$w_A=\frac{\sigma_B^2-\sigma_A \sigma_B \rho_{r_A r_B}}{\sigma_A^2+\sigma_B^2-2\sigma_A\sigma_B\rho_{r_A r_B}}$$

** ~cvxpy~
*** one variable with the size of one
   #+begin_src python
     import cvxpy as cvx
     import numpy as np

     x = cvx.Variable(1)
     objective = cvx.Minimize((x - 1)**2 + 1)
     constraints = [x <= 0]
     problem = cvx.Problem(objective, constraints)
     result = problem.solve()
     # Optimal value of x => x.value[0]
     # Optimal value of the objective => problem.value
   #+end_src

*** Two Variables
    - Minimize the portfolio variance
    #+begin_src python
      import cvxpy as cvx
      import numpy as np

      x = cvx.Variable(2)
      covariance = np.sqrt(var_a) * np.sqrt(var_b) * correlation_ab
      P = np.array([[var_a, covariance], [covariance, var_b]])
      objective = cvx.Minimize(cvx.quad_form(x, P))
      constraints = [sum(x)==1]
      problem = cvx.Problem(objective, constraints)
      result = problem.solve()
      # Optimal weights: x.value
    #+end_src

*** More Variables
    - Objective
      - Minimize both the portfolio variance
      - Minimize the distance between the weights of our portfolio and the weights of the index.
    - To minimize $[\sigma_p^2+\lambda\sqrt{\sum_{i=1}^n(weight_i-indexWeight_i)^2}]$
    - $\sqrt{\sum_{i=1}^n(weight_i-indexWeight_i)^2}$ also be written as $||\boldsymbol{x}-\boldsymbol{index}||_2$
      - ~cvx.norm(portfolio_weights-index_weights, p=2)~
    #+begin_src python
      import cvxpy as cvx
      import numpy as np

      # returns: 2D array containing stock return series in each row.
      # index_weights: 1D numpy array containing weights of the index.
      # scale: The scaling factor applied to the distance between portfolio and index weights
      n_stocks = len(returns)
      cov = np.cov(returns)
      x = cvx.Variable(n_stocks)
      portfolio_variance = cvx.quad_form(x, cov)
      distance_to_index = cvx.norm(x - index_weights, p=2)
      objective = cvx.Minimize(portfolio_variance + scale * distance_to_index)
      constraints = [x>=0, sum(x)==1] # long only
      problem = cvx.Problem(objective, constraints)
      result = problem.solve()
    #+end_src

*** Useful Functions
    - *cvx.quad_form*: ~cvx.quad_form(w, P)~ represents the $\boldsymbol{w}^T\boldsymbol{P_x}$, the *portfolio variance*.
    - *cvx.norm*: ~cvx.norm(w-b, 2)~ minimize the distance between *w* and another vector *b*, i.e. $||\boldsymbol{x}-\boldsymbol{b}||_2$
      - L2-Norm
    - *problem.status*: Use ~problem.status~ to access the status of the problem and check whether it has been determined to be *unfeasible* or *unbounded*.

** Portfolio Optimization Problems
*** Common Constraints
    - *no short selling* weights: $0\le w_i \le 1$,  $\sum_{i=1}^n w_i$
    - *sector limits*: $w_{tech1}+w_{tech2}+w_{tech3}\le M$;   /M=% of portfolio to invest in tech companies/
    - *constraint on portfolio return*: $\boldsymbol{w}^T\boldsymbol{\mu}\ge r_{min}$;  /r_{min}=minimum acceptable portfolio return/

*** Maximizing Portfolio Return
    - *objective*: minimize $f(w)=-\boldsymbol{w}^T\boldsymbol{\mu}$
    - *constraint*: $\boldsymbol{w}^T\boldsymbol{P_w} \le p$;  /p=maximum permissible portfolio variance/

*** Maximizing Portfolio Return And Minimizing Portfolio Variance
    - *objective*: minimize $f(w)=-\boldsymbol{w}^T\boldsymbol{\mu}+b \boldsymbol{w}^T\boldsymbol{P_w}$;  /b=tradeoff prarameter/

*** Minimizing Distance to a Set of Target Weights
    The goal would be to get the weights as close as possible to the set of target weights while respecting a set of constraints.
    As an example, these target weights might be values thought to be proportional to future returns for each asset, in other words,
    an alpha vector.

    - *objective*: minimize $||\boldsymbol{w}-\boldsymbol{w}^*||_2$;  $\boldsymbol{w}^*$ /=a set of target portfolio weights/

*** Tracking an Index
    one intuitive way is to simply minimize the difference between your portfolio weights and the weights on the assets in the index,
    and minimize portfolio variance at the same time.
    - *objective*: minimize $\boldsymbol{w}^T\boldsymbol{P_w}+\lambda||\boldsymbol{w}-\boldsymbol{q}||_2$
      - *q* = a set of index weights
      - $\lambda$ = a tradeoff parameter

*** Limitations
    - Estimating portfolio mean
    - Estimating portfolio variance
      - Variance may not be a good enough measure of risk.
	- Using alternative measures of risk
      - Large matrix(Estimating large numbers of parameters introduces the possibility of aggregating many estimation errors)
	- Need a long enough historical stock price dataset to produce reliable estimates of covariances.
	- Example: Estimating a covariance matrix of 50 assets requires at least 5 years of daily data.
    - Any estimate is noisy.
      - Using ranks so that you can only keep track of their relative magnitude
      - Introducing a term in the objective function to penalize turnover. (less trade less reactive to noise)
      - A method called robust optimization which takes into account CI of estimates.
    - Single period
      - multi-period optimization
    - Transaction costs

* Rebalancing
** Rebalancing Costs
   - Transaction costs
   - Taxes
   - Time and labor costs

** Portfolio Turnovers
   - Portfolio Turnover :: The sum total of the changes in the weights on all the assets.

     $$P_{turnover}=sum(\boldsymbol{w_t-w_{t-1}})$$

** Rebalancing Strategies
   - Schedule-based
   - Predetermined threshold of total change in the weights

* Summary
  - *Portfolio Expected Return*
  $$\mu_P=\sum_{i=1}^{N}w_i \mu_i=\boldsymbol{w^T\mu}$$
  - *Portfolio Variance*
    - $P_w$ is the covariance matrix.
  $$\sigma_P^2=\sum_{i=1}^N\sum_{j=1}^N w_i Cov(r_i, r_j)w_j=\boldsymbol{w^TPw}$$
  - CAMP Portfolio Return
   $$r_P=\sum_{i=1}^n w_i(r_f+\beta_i(r_m-r_f))$$
  - CAMP Portfolio Beta
   $$\beta_P=\sum_{i=1}^n w_i\beta_i$$

* Reference
  - Lesson 20
    - [[https://youtu.be/8u5gBx-fYr8][11. Rebalancing Strategies]]
    - [[https://youtu.be/UbbZa7-3iuk][12. Limitations of the Classical Approach]]
