#+TITLE: Zipline Example
#+OPTIONS: H:3 toc:2 num:2 ^:nil
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com
#+begin_src python
  import os
  from zipline.data import bundles
  from zipline.data.bundles.csvdir import csvdir_equities
  from zipline.pipeline import Pipeline
  from zipline.pipeline.factors import AverageDollarVolume

  bundle_name = "eod-quotemedia"

  # Create an ingest function
  ingest_func = csvdir_equities(["daily"], bundle_name)
  bundles.register(bundle_name, ingest_func)

  # Set env to the data path
  os.environ["ZIPLINE_ROOT"] = ...

  bundle_data = bundles.load(bundle_name)

  # Create a screen and an pipeline
  universe = AverageDollarVolume(window_length = 60).top(10)
  pipeline = Pipeline(screen = universe)

  # Render the pipeline as a DAG
  pipeline.show_graph()

  from zipline.pipeline.loaders import USEquityPricingLoader
  # Set the dataloader
  pricing_loader = USEquityPricingLoader(bundle_data.equity_daily_bar_reader, bundle_data.adjustment_reader)


  # Create a Pipeline engine
  from zipline.utils.calendars import get_calendar
  from zipline.pipeline.data import USEquityPricing
  from zipline.pipeline.engine import SimplePipelineEngine

  # Define the function for the get_loader parameter
  def choose_loader(column):
      if column not in USEquityPricing.columns:
	  raise Exception('Column not in USEquityPricing')
      return pricing_loader

  trading_calendar = get_calendar('NYSE')

  engine = SimplePipelineEngine(get_loader = choose_loader,
				calendar = trading_calendar.all_sessions,
				asset_finder = bundle_data.asset_finder)


  # Running a Pipeline
  import pandas as pd
  start_date = pd.Timestamp('2016-01-05', tz = 'utc')
  end_date = pd.Timestamp('2016-01-05', tz = 'utc')

  pipeline_output = engine.run_pipeline(pipeline, start_date, end_date)
  print('The pipeline output has type:', type(pipeline_output))
  print('Is the pipeline output a MultiIndex Dataframe:', isinstance(pipeline_output.index, pd.core.index.MultiIndex))

  # Get tickers
  universe_tickers = pipeline_output.index.get_level_values(1).values.tolist()

  from zipline.data.data_portal import DataPortal

  # Create a data portal
  data_portal = DataPortal(bundle_data.asset_finder,
			   trading_calendar = trading_calendar,
			   first_trading_day = bundle_data.equity_daily_bar_reader.first_trading_day,
			   equity_daily_reader = bundle_data.equity_daily_bar_reader,
			   adjustment_reader = bundle_data.adjustment_reader)

  def get_pricing(data_portal, trading_calendar, assets, start_date, end_date, field='close'):

      # Set the given start and end dates to Timestamps. The frequency string C is used to
      # indicate that a CustomBusinessDay DateOffset is used
      end_dt = pd.Timestamp(end_date, tz='UTC', freq='C')
      start_dt = pd.Timestamp(start_date, tz='UTC', freq='C')

      # Get the locations of the start and end dates
      end_loc = trading_calendar.closes.index.get_loc(end_dt)
      start_loc = trading_calendar.closes.index.get_loc(start_dt)

      # return the historical data for the given window
      return data_portal.get_history_window(assets=assets, end_dt=end_dt, bar_count=end_loc - start_loc,
					    frequency='1d',
					    field=field,
					    data_frequency='daily')

  # Get the historical data for the given window
  historical_data = get_pricing(data_portal, trading_calendar, universe_tickers,
				start_date='2011-01-05', end_date='2016-01-05')


  # Create a factor that computes the 15-day mean closing price of securities
  from zipline.pipeline.factors import SimpleMovingAverage

  mean_close_15 = SimpleMovingAverage(inputs = [USEquityPricing.close], window_length = 15)
  pipeline.add(mean_close_15, '15 Day MCP')
  # pipeline.show_graph()
  start_date = pd.Timestamp('2014-01-06', tz='utc')
  end_date = pd.Timestamp('2016-01-05', tz='utc')
  output = engine.run_pipeline(pipeline, start_date, end_date)
  output.head()

  # Create a Filter that returns True whenever the 15-day average closing price is above $100
  high_mean = mean_close_15 > 100
  pipeline.add(high_mean, 'High Mean')
  # pipeline.show_graph()
  output = engine.run_pipeline(pipeline, start_date, end_date)
  output.head()
  #+end_src
