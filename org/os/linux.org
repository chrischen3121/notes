#+TITLE: Linux Administration
#+KEYWORDS: linux, operating, administration
#+OPTIONS: H:3 toc:2 num:3 ^:nil
#+LANGUAGE: en-US
#+AUTHOR: ChrisChen
#+EMAIL: ChrisChen3121@gmail.com

* findutils
** ~which~
** ~whereis~
   searches a broader range of system directories and is independent of your shell’s search path
** ~locate~
   consults a precompiled index of the filesystem to locate file

* Help
** man
   #+BEGIN_SRC shell
     man -k regexp
     man -f command # list all sections
   #+END_SRC

*** ~manpath~
    Use ~manpath~ to see locations of the man files

* Booting
  1. Loading BIOS/UEFI from NVRAM
  1. Probe for hardware
  1. Select boot device(disk, network,...)
  1. Identify EFI system partition
  1. Load boot loader(e.g. GRUB)
  1. Determine which kernel to boot
  1. Load kernel
  1. Instantiate kernel data structures
  1. Start init/systemd as PID 1
  1. Execute startup scripts
  1. Running system

** BIOS vs. UEFI
*** Legacy BIOS(Basic Input/Output System)
    BIOS assumes that the boot device starts with a record called the MBR.
    MBR reads and executes the second-stage boot loader(volume boot record)

*** UFEI(Unified Extensible Firmware Interface)
    The UEFI specification includes a modern disk partitioning scheme known as GPT(GUID Partition Table).

** GRUB 2
*** config
    - /etc/default/grub
    - /etc/grub.d/40_custom
    - /boot/grub/grub.cfg

      Use *grub-mkconfig* to generate grub.cfg, *update-grub* stub for *grub-mkconfig* on Ubuntu

** init
*** modes
**** Single-user mode
     in which only a minimal set of filesystems is mounted, no services
     are running, and a root shell is started on the console.
**** Multiuser mode
     in which all customary filesystems are mounted and all configured
     network services have been started, along with a window system and graphical login
     manager for the console
**** Server mode
     similar to multiuser mode, but with no GUI running on the console
*** Implementations
**** "traditional *init*" from AT&T’s System V UNIX
     system modes are known as "run levels"
**** BSD *init*
**** *systemd* for linux
**** *launchd* for macOS
**** *Upstart* for ubuntu
** systemd
*** *unit* file
    #+BEGIN_SRC systemd
      [Unit]
      Description=fast remote file copy program daemon
      ConditionPathExists=/etc/rsyncd.conf

      [Service]
      ExecStart=/usr/bin/rsync --daemon --no-detach

      [Install]
      WantedBy=multi-user.target
    #+END_SRC
    unit directory: */usr/lib/systemd/system* or */lib/systemd/system*.
    */run/systemd/system* that’s a scratch area for transient units.

*** systemctl
**** Subcommands
     | Subcommand                | Function                                           |
     |---------------------------+----------------------------------------------------|
     | list-unit-files [pattern] | Shows installed units; optionally matching pattern |
     | enable /unit/             | Enables /unit/ to activate at boot                 |
     | disable /unit/            | Prevents /unit/ from to activate at boot           |
     | isolate /target/          | Changes operating mode to target                   |
     | start /unit/              |                                                    |
     | stop /unit/               |                                                    |
     | restart /unit/            |                                                    |
     | status /unit/             |                                                    |
     | kill /pattern/            | Sends a signal to units matching /pattern/         |
     | daemon-reload             | Reloads unit files and *systemd* configuration     |
     | list-units                |                                                    |

**** States
     | State    | Meaning                                                        |
     |----------+----------------------------------------------------------------|
     | bad      | Smoe kind of problem within *systemd*; usually a bad unit file |
     | disabled | Present, but not configured to start autonomously              |
     | enabled  | Installed and runnable; will start autonomously                |
     | indirect | Disabled, but has peers in Also clauses that may be enabled    |
     | linked   | Unit file available through a symlink                          |
     | masked   | Banished from the *systemd* world from a logical perspective   |
     | static   | Depended upon by another unit; has no install requirements     |

**** Targets
     Target is a group of Units
     #+CAPTION: Mapping between init run levels and systemd targets
     |    Run level | Target            | Description                            |
     |--------------+-------------------+----------------------------------------|
     |            0 | poweroff.target   | System halt                            |
     |    emergency | emergency.target  | Bare-bones shell for system recovery   |
     | 1, s, single | rescue.target     | Single-user mode                       |
     |            2 | multi-user.target | Multiuser mode(command line)           |
     |            3 | multi-user.target | Multiuser mode with networking         |
     |            4 | multi-user.target | Not normally used by *init*            |
     |            5 | graphical.target  | Multiuser mode with networking and GUI |
     |            6 | reboot.target     | System reboot                          |
     To change current operating mode, use *systemctl isolate*, like *telinit* for *init*.
     *systemctl get-default* see the target the system boots into by default. *set-default* to set default.

*** Dependencies
    #+CAPTION: Explict dependencies in the [Unit] section
    | Option    | Meaning                                                                  |
    |-----------+--------------------------------------------------------------------------|
    | Wants     | Units that should be coactivated if possible, but are not required       |
    | Requires  | Strict dependencies; failure of any prerequisite terminates this service |
    | Requisite | Like Requires, but must already be active                                |
    | BindsTo   | Similar to Requires, but even more tightly coupled                       |
    | PartOf    | Similar to Requires, but affects only starting and stopping              |
    | Conflicts | Negative dependencies; cannot be coactive with these units               |
    Use systemctl *add-wants* or *add-requires* to specify a dependency.
    Or add option *WantedBy* or *RequiredBy* to [Install] section.

*** Execution order
    Use Before/After clauses from the unit files to sort the work list.

*** a more complex example
    #+BEGIN_SRC systemd
      [Unit]
      Description=The nginx HTTP and reverse proxy server
      After=network.target remote-fs.target nss-lookup.target

      [Service]
      Type=forking
      PIDFile=/run/nginx.pid
      ExecStartPre=/usr/bin/rm -f /run/nginx.pid
      ExecStartPre=/usr/sbin/nginx -t
      ExecStart=/usr/sbin/nginx
      ExecReload=/bin/kill -s HUP $MAINPID
      KillMode=process
      KillSignal=SIGQUIT
      TimeoutStopSec=5
      PrivateTmp=true

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

*** useful man to write unit file
    - *man systemd.service* to see complete list of options for service
    - *man systemd.unit* to see common options for all types

*** customizations
    Add *conf* file to */etc/systemd/system/xxx.service.d* directory.
    - easy way:
    #+BEGIN_SRC shell
      systemctl edit xxx.service
      systemctl restart xxx.service
    #+END_SRC

*** logging
    System messages captured by *journald* are stored in the */run* directory.

    *rsyslog* can process these messages and store then in traditional log files or
    forward them to a remote syslog server.

    *journalctl* displays log entries. *-u* to specify which service to display.

*** Utilities
    - systemctl
    - systemd-analyze
    - hostnamectl
    - localectl
    - timedatectl
    - loginctl
    - networkctl

** shutdown
*** *halt*
    Performs the essential duties required for shutting down the system
*** *reboot*
    Essentially identical to halt, but it causes the machine to reboot instead of halting
*** *shutdown*
    The shutdown command is a layer over halt and reboot that provides for scheduled shutdowns
    and ominous warnings to logged-in users

* Access Control
** /etc/passwd
*** Login name
*** Encrypted password placeholder
- actual password in */etc/shadow*
- change password restriction by editing */etc/login.defs*
*** UID (user ID) number
*** Default GID (group ID) number
*** GECOS information
    Use *finger* command to interpert GECOS, use *chfn* to change GECOS
    - full name
    - office number and building
    - office telephone extension
    - home phone number

*** Home directory
*** Login shell
    Use *chsh* to change login shell listed in */etc/shells*.

** /etc/shadow
- Login name *required*
- Encrypted password *required*
- Date of last password change
- Minimum number of days between changes
- Maximum number of days between password changes
- Number of days in advance to warn users about password expiration
- Linux: Days after password expiration that account is disabled
- Account expiration date
- A reserved field that is currently always empty

** /etc/group
- Group name
- Encrypted password or a placeholder
- GID number
- List of members, separated by commas


It is possible to enter a group password to allow users not belonging to
a group to enter it with the *newgrp* command.

A password can be set with the *gpasswd* command

A user’s personal group should contain only that user. If you want to let users
share files by way of the group mechanism, create separate groups for that purpose
** /etc/sudoers
   #+BEGIN_SRC shell
     mark, ed    SOME_HOST_ALIAS=ALL
     herb    SOME_HOST_ALIAS=/usr/sbin/tcpdump : !SOME_HOST_ALIAS=(operator) DUMP
     lynda    ALL=(ALL)ALL, !SOME_CMND_ALIAS
     %wheel    ALL, !SOME_HOST_ALIAS = NOPASSWD: SOME_CMND_ALIAS
   #+END_SRC

   Whitelist the environment variables by adding them to the sudoers file’s env_keep list

** users basic
*** Required
**** Sign policy agreement
**** Edit the *passwd* and *shadow* files to define user
     Use *vipw* to edit *passwd* and *shadow*
**** Add the user to the /etc/group file(optional)
     If the new user should be a member of more groups than just the default group
     specified in the passwd file, you must edit the /etc/group file and add the user’s
     login name to each of the additional groups.
**** Set an initial password
     Use *passwd*
**** Create, *chown*, and *chmod* the user’s home directory.
     #+BEGIN_SRC bash
       sudo chown -R newuser:newgroup ~newuser
     #+END_SRC
**** Configure roles and permissions(RBAC)

*** For the user
**** Copy default startup files to the user’s home directory.
**** Set the user’s mail home and establish mail aliases.

*** For administrator
**** Verify that the account is set up correctly.
**** Add the user’s contact information and account status to your database.

*** Verification
    #+BEGIN_SRC bash
      $ pwd /* verify home directory */
      $ ls -al /* check owner/group of startup files */
    #+END_SRC

** *useradd* command
*** examples
    #+BEGIN_SRC bash
      sudo useradd -c "chrischen" -d /home/chrischen -m -s /bin/zsh chrischen
      sudo usermod -aG sudo chrishcen
    #+END_SRC
*** ubuntu
    Ubuntu provides two ways to add users: *adduser* and *useradd*. *adduser* is a Perl
    wrapper for useradd that is a bit more helpful (makes home directories, copies in
    startup files, etc.).
    - *adduser* is configured in */etc/adduser.conf*
    - *adduser* has a twin *addgroup* and cousins *deluser* and *delgroup*.

** Disabling logins
   - *usermod -L* to lock user
   - *usermod -U* to unlock user
** Centralizing account management
*** LDAP
*** Identity management systems
** Authentication
*** PAM(Pluggable Authentication Modules)
    PAM is a wrapper for a variety of method-specific authentication libraries.
*** Kerberos: network cryptographic authentication
    PAM is an authentication framework, Kerberos is a specific authentication method,
    PAM and Kerberos generally work together
*** Filesystem ACL
*** Linux capabilities
*** Linux namespaces
** Modern Access Control
*** MAC
*** RBAC
*** Implementations
**** AppArmor
* Process Control
** kernel related data in memory
   - The process’s address space map
   - The current status of the process (sleeping, stopped, runnable, etc.)
   - The execution priority of the process
   - Information about the resources the process has used (CPU, memory, etc.)
   - Information about the files and network ports the process has opened
   - The process’s signal mask (a record of which signals are blocked)
   - The owner of the process

** Signals
   | No | Name  | Description          | Default   | Can catch? | Can block? | Dump core? |
   |----+-------+----------------------+-----------+------------+------------+------------|
   |  1 | HUP   | Hangup               | Terminate | Y          | Y          | N          |
   |  2 | INT   | Interrupt            | Terminate | Y          | Y          | N          |
   |  3 | QUIT  | Quit                 | Terminate | Y          | Y          | Y          |
   |  9 | KILL  | Kill                 | Terminate | N          | N          | N          |
   | 10 | BUS   | Bus error            | Terminate | Y          | Y          | Y          |
   | 11 | SEGV  | Segmentation fault   | Terminate | Y          | Y          | Y          |
   | 15 | TERM  | Software termination | Terminate | Y          | Y          | N          |
   | 17 | STOP  | Stop                 | Stop      | N          | N          | N          |
   | 18 | TSTP  | Keyboard stop        | Stop      | Y          | Y          | N          |
   | 19 | CONT  | Continue after stop  | Ignore    | Y          | N          | N          |
   | 28 | WINCH | Window changed       | Ignore    | Y          | Y          | N          |
   | 30 | USR1  | User-defined #1      | Terminate | Y          | Y          | N          |
   | 31 | USR2  | User-defined #2      | Terminate | Y          | Y          | N          |
   *kill -l* to list signals.

** *kill*
   - killall: kill by process name
   - pkill: search for process to kill

** *ps*
   Useful options
   - aux: *a* show all processes; *x* show processes that don't have a control terminal; *u* user oriented output format
   - lax: faster than aux(UID only), aslo includes PPID, NI(niceness) and wait channel
     - ww: enable unlimited column width

*** with *grep*
    ps -aux | grep -v grep | grep xxxx
*** alternative command
    - *pidof* :: determine the PID of a process
    - *pgrep*

** *pstree*
** *pidstat*
   #+BEGIN_SRC bash
     pidstat -d -p PID 1 3
   #+END_SRC
** *top*
   1: show loads of individual cores
   - H: show threads

*** alternative *htop*

** *nice*
   - Niceness range: ~-20~ to ~19~
   - Only root can run a command with high priority
   - *renice*

** *execsnoop*
** =/proc=
   *ps* and *top* read their process status information from the =/proc= directory
*** useful process files
    cgroups, cmd, cmdline, cwd, environ, exe, fdinfo, ns, root, stat, statm
    - fd :: reperents open files
    - maps :: libraries dependencies

** *strace*(lower level)
   Display every system call that a process makes and every signal it receives
   - ~-f~ to trace sub processes

** load average
   - *uptime*: load average of 1-, 5-, 15-minute intervals(cpu&io)

** identify processes using files or sockets
   - *fuser*
   - *lsof*: list open files

** periodic processes
   - crontab
   - systemd timer

** process state
   - R: Running/Runnable
   - D: Disk Sleep (Uninterruptible Sleep)
   - Z: Zombie
   - S: Interruptible Sleep
   - I: Idle

* Filesystem
** mount
   1. ~mkfs.type~
   1. ~mount -t type /dev/sda [mountpoint]~
   - ~umount [mountpoint]~

** mounting
   - =/etc/fstab= :: lists filesystems that are normally mounted on the system.
   - *fuser -c mountpoint* :: prints the PID of every process that’s using a file or directory on that filesystem. uses *-v* to display command name
   - *lsof* ::  alternative to *fusr*, *-F* for easy parsing

** File type
   - investigating file type: ~file~ or ~ls~
     | Symbol | Type                  | Created by |
     |--------+-----------------------+------------|
     | -      | regular file          | editors    |
     | d      | directory             | ~mkdir~    |
     | c      | character device file | ~mknod~    |
     | b      | block device file     | ~mknod~    |
     | s      | domain socket         |            |
     | p      | named pipe            | ~mknod~    |
     | l      | symbolic link         | ~ln -s~    |

** Important Directories
   - ~man hier~
  | =/bin=           | Contains binaries (programs) that must be present for the system to boot and run.                                                                                       |
  | =/boot=          | Contains the Linux kernel, initial RAM disk image, and the boot loader.                                                                                                 |
  | =/dev=           | This is a special directory that contains device nodes.                                                                                                                 |
  | =/etc=           | Contains all of the system-wide configuration files.                                                                                                                    |
  | =/home=          |                                                                                                                                                                         |
  | =/lib=           | Contains shared library files used by the core system programs.                                                                                                         |
  | =/lost+found=    | It is used in the case of a partial recovery from a filesystem corruption event.                                                                                        |
  | =/media=         | Contain the mount points for removable media such as USB drives, CD-ROMs, etc.                                                                                          |
  | =/opt=           | The =/opt= directory is used to install "optional" software. This is mainly used to hold commercial software products that may be installed on your system.             |
  | =/proc=          | It is a virtual filesystem maintained by the Linux kernel. The files are readable and will give you a picture of how the kernel sees your computer.                     |
  | =/root=          | This is the home directory for the root account.                                                                                                                        |
  | =/sbin=          | This directory contains 'system' binaries. These are programs that perform vital system tasks that are generally reserved for the superuser.                            |
  | =/tmp=           | The =/tmp= directory is intended for storage of temporary, transient files created by various programs.                                                                 |
  | =/usr=           | The =/usr= directory tree is likely the largest one on a Linux system. It contains all the programs and support files used by regular users.                            |
  | =/usr/bin=       | Contains the executable programs installed by your Linux distribution                                                                                                   |
  | =/usr/lib=       | The shared libraries for the programs in =/usr/bin=.                                                                                                                    |
  | =/usr/local=     | The =/usr/local= tree is where programs that are not included with your distribution but are intended for system-wide use are installed.                                |
  | =/usr/sbin=      | Contains more system administration programs.                                                                                                                           |
  | =/usr/share=     | Contains all the shared data used by programs in =/usr/bin=.                                                                                                            |
  | =/usr/share/doc= | Most packages installed on the system will include some kind of documentation.                                                                                          |
  | =/var=           | The =/var= directory tree is where data that is likely to change is stored. Various databases, spool files, user mail, etc. are located here.                           |
  | =/var/log=       | Contains log files, records of various system activity. These are very important and should be monitored from time to time. The most useful one is =/var/log/messages=. |

** interesting files
  - =/boot/grub/grub.cfg=, which are used to configure the boot loader
  - =/boot/vmlinuz=, the Linux kernel
  - =/etc/crontab=, a file that defines when automated jobs will run
  - =/etc/fstab=, a table of storage devices and their associated mount points1

* NFS
* LDAP
  | Attribute   | Stands for        | Description                                     |
  |-------------+-------------------+-------------------------------------------------|
  | o           | Organization      | Often identifies a site's top-level entry       |
  | ou          | Organization unit | A logical subdivision                           |
  | cn          | Common name       | The most natural name to represent the entry    |
  | dc          | Domain component  | Used at sites that model their hierarchy on DNS |
  | objectClass | Object class      | Schema to which this entry's attributes conform |

** openldap
   - command: *slapd*
   - cluster: *slurpd* (master server)
   - configuration: =/etc/openldap/slapd.conf=
     #+BEGIN_SRC conf
       database bdb # default: Berkely DB
       suffix "dc=mydomain,dc=com" # LDAP basename, like DNS domain name
       rootdn "cn=admin,dc=mydomain,dc=com" # administrator name
       rootpw {crypt}abcDEFg/uiR # hashed password
       directory /var/lib/ldap
     #+END_SRC
   - configuration: =/etc/openldap/lapd.conf=, set the /base/ to the same value as the suffix
     #+BEGIN_SRC conf
       BASE dc=mydomain,dc=com
       URI ldap://xxx.mydomain.com
     #+END_SRC

   - use *slappasswd* to change password

** 389 Directory Server
   Advantages:
   - Multimaster replication
   - Active Directory user and group synchronization
   - A graphical console for all facets of user, group, and server management

** phpLDAPadmin
** ldapsearch
   command-line tool
* Networking
** Troubleshooting
* Text Processing
   - =cut=: separate lines into fields
   - =sort=: sort lines
   - =uniq=: print unique lines
   - =wc=: count lines, words, and characters
   - =tee=: copy input to two places
** grep
    | -i, --ignore-case  |                                                             |
    | -v, --invert-match | Invert the sense of matching, to select non-matching lines. |

* Useful Command
** os
   - ~uname -a~
   - ~lsb_release -a~
** File System
*** ~ls~
    | -a, --all            | do not ignore entries starting with .           |
    | -d, --directory      | list directories themselves, not their contents |
    | -F, --classify       | append indicator to entries                     |
    | -h, --human-readable | print human readable sizes                      |
    | -r, --reverse        | reverse order while sorting                     |
    | -S                   | sort by file size, largest first                |
    | -t                   | sort by modification time, newest first         |
*** ~file~
    determine file type
*** ~less~, ~head~, ~tail~
*** ~mkdir~
*** ~cp~
    | -a, --archive     | Copy the files and directories and all of their attributes, including ownerships and permissions.                                                                           |
    | -i, --interactive | Before overwriting an existing file, prompt the user for confirmation.                                                                                                      |
    | -r, --recursive   | Recursively copy directories and their contents.                                                                                                                            |
    | -u, --update      | When copying files from one directory to another, copy only files that either don’t exist or are newer than the existing corresponding files in the destination directory. |
    | -v, --verbose     | Display informative messages as the copy is performed.                                                                                                                      |
*** ~mv~
    similar to cp, common options: -i, -u, -v

*** ~rm~
    similar to cp, common options: -i, -r, -v
    | -f, --force | Ignore nonexistent files and do not prompt. This overrides the --interactive option. |

*** ~ln~
    - create soft link: ~ln file link~
    - create hard link: ~ln -s item link~
**** hard link limitation
     - A hard link cannot reference a file outside its own filesystem. This means a link
     cannot reference a file that is not on the same disk partition as the link itself.
     - A hard link cannot reference a directory.

*** GLOB pattern
    | Wildcard        | Matches                                                  |
    |-----------------+----------------------------------------------------------|
    | =*=             | Any characters                                           |
    | =?=             | Any single character                                     |
    | =[characters]=  | Any character that is a member of the set ~characters~   |
    | =[!characters]= | Any character that is not a member of the set characters |
    | =[CLASS]=       | Any character that is a member of the specified class    |

**** most commonly used character classes
     | =[:alnum:]= | Any alphanumeric character |
     | =[:alpha:]= | Any alphabetic character   |
     | =[:digit:]= | Any numeral                |
     | =[:lower:]= | Any lowercase letter       |
     | =[:upper:]= | Any uppercase letter       |

** Command Related
   - =which=: Display which executable program will be executed.
   - =man=: Display a command’s manual page.
   - =apropos=: Display a list of appropriate commands. same as =man -k=
   - =info=: Display a command’s info entry.
   - =whatis=: Display a very brief description of a command.

*** =type=
    Indicate how a command name is interpreted. All types:
    - An executable program
    - A command built into the shell itself(e.g. cd)
    - A shell function
    - An alias(e.g. ls)

*** =alias=
    Create an alias for a command.
    #+BEGIN_SRC sh
      alias foo='cd /usr; ls; cd -'
      alias # list all aliases
    #+END_SRC

** Redirection
*** Redirecting stdout and stderr to one file
    #+BEGIN_SRC sh
      some-command > output.txt 2>&1 # old version, the order of the redirections is significant.
      some-command &> output.txt
    #+END_SRC

** Expansion
*** Arithmetic Expansion
    #+BEGIN_SRC sh
      echo $((2 + 2))
    #+END_SRC

*** Brace Expansion
    #+BEGIN_SRC sh
      echo Number_{1..5}
      # => Number_1 Number_2 Number_3 Number_4 Number_5

      echo {Z..A}
      # => Z Y X W V U T S R Q P O N M L K J I H G F E D C B A

      echo a{A{1,2},B{3,4}}b
      # => aA1b aA2b aB3b aB4b

      mkdir {2009..2011}-0{1..9} {2009..2011}-{10..12}
    #+END_SRC

*** Command Substitution
    #+BEGIN_SRC sh
      echo $(ls)
      ls -l $(which cp)
      # same as
      ls -l `which cp` # old syntax
    #+END_SRC

*** Quoting
    #+BEGIN_SRC sh
      echo text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER
      # => text /home/me/ls-output.txt a b foo 4 me

      echo "text ˜/*.txt {a,b} $(echo foo) $((2+2)) $USER"
      # => text ˜/*.txt {a,b} foo 4 me

      echo 'text ˜/*.txt {a,b} $(echo foo) $((2+2)) $USER' # suppress all expansions
      # => text ˜/*.txt {a,b} $(echo foo) $((2+2)) $USER
    #+END_SRC

*** Escaping Characters
    | \a | Beep            |
    | \b | Backspace       |
    | \n | Newline         |
    | \r | Carriage return |
    | \t | Tab             |
    #+BEGIN_SRC sh
      sleep 10; echo -e  "Time's up\a"
      # or
      sleep 10; echo "Time's up" $'\a'
    #+END_SRC

* Writing Script
** set
   #+BEGIN_SRC bash
     set -eux
     set -o pipefail
   #+END_SRC

** variables
   #+BEGIN_SRC bash
     etcdir='/etc'
     echo $etcdir
     echo ${etcdir}
     echo "$etcdir"
     echo "${etcdir}"
   #+END_SRC

** arguments
   - ~$0~: command
   - ~$1~, ~$2~: arguments
   - ~$#~: argument count
   - ~$*~: all arguments
   - ~$?~: return value of last command

** comparison
   - eq, ne, lt, le, gt, ge, -n, -z
   - file: -d, -e, -f, -r, -s, -w, -nt(newer than), -ot(older than)

** command currying
   #+BEGIN_SRC bash
     function ssh {
	 /usr/bin/ssh -p 7988 $*
     }
     # same as
     alias ssh="/usr/bin/ssh -p 7988"
   #+END_SRC

** loop
   #+BEGIN_SRC bash
     for var in $*; do
	 echo $var
     done

     for ((i=0; i < $CPU_COUNT; i++)); do
	 echo $i
     done

     while read line; do
	 echo $line
     done
   #+END_SRC

** show usage
   #+BEGIN_SRC bash
     #!/bin/bash
     function show_usage {
	 echo "Usage: $0 source_dir dest_dir"
	 exit 1
     }

     # Main starts here
     if [ $# -ne 2 ]; then
	 show_usage
     else # There are two arguments
	 if [ -d $1]; then
	     source_dir=$1
	 else
	     echo "Invalid source directory"
	     show_usage
	 fi
	 if [ -d $2]; then
	     dest_dir=$2
	 else
	     echo "Invalid dest directory"
	     show_usage
	 fi
     fi
   #+END_SRC

** quotes
   #+BEGIN_SRC bash
     mylang="Chinese"
     echo "I speak ${mylang}" #-> I speak Chinese
     echo 'I speak ${mylang}' #=> I speak ${mylang}
     echo "There are `wc -l /etc/passwd` lines in the passwd file"
   #+END_SRC

** an example
   #+BEGIN_SRC bash
     find . -name '*log '
     find . -type f -name '*.log '
     find . -type f -name '*.log ' | grep -v .do-not-touch
     find . -type f -name '*.log ' | grep -v .do-not-touch | while read fname
     do
     echo mv $fname ${fname/.log/.LOG/}
     done
     # finally
     find . -type f -name '*.log ' | grep -v .do-not-touch | while read fname; do
	 echo mv $fname ${fname/.log/.LOG/}; done | bash -x
   #+END_SRC
   *bash -x* prints each command before executing it. Use *fc* to transfer last command to editor.

** args
   - $0: name of the script
   - $1: first argument
   - $#: the number of arguments
   - $*: contains all the arguments at once

   - echo $?: the exit status of the last command executed
** Control flow
*** *if* clause
   #+BEGIN_SRC bash
     if [condition]
     then dosomething
     elif [condition]
     then dosomething
     else dosomething
     fi
   #+END_SRC
*** *case* clause
    #+BEGIN_SRC bash
      case $message_level in
	  0) message_level_text="Error" ;;
	  1) message_level_text="Warning" ;;
	  2) message_level_text="Info" ;;
	  3) message_level_text="Debug" ;;
	  ,*) message_level_text="Other"
      esac
    #+END_SRC

*** comparison operators
   | String | Numeric |
   |--------+---------|
   | x = y  | x -eq y |
   | x != y | x -ne y |
   | x < y  | x -lt y |
   | x <= y | x -le y |
   | x > y  | x -gt y |
   | x >= y | x -ge y |
   | -n x   | -       |
   | -z x   | -       |

*** bash file operators
   | Operator        | True if                            |
   |-----------------+------------------------------------|
   | -d file         | file exists and is a directory     |
   | -e file         | file exists                        |
   | -f file         | file exists and is a regular file  |
   | -r file         | You have read permissions on file  |
   | -s file         | file exists and is not empty       |
   | -w file         | You have write permissions on file |
   | file1 -nt file2 | file1 is newer than file2          |
   | file1 -ot file2 | file1 is order than file2          |
*** Loops
    #+BEGIN_SRC bash
      for var in stuff; do
	  ...
      done

      while cond; do
	  ...
      done

      for ((i=0; i < count; i++)); do
	  ...
      done
    #+END_SRC
*** $(())
    The $((...)) notation forces numeric evaluation,
    #+BEGIN_SRC bash
    $((counter++))
    $(($a+$b))
    #+END_SRC
*** Array
    Use *${array_name[subscript]}* to access individual elements.
    The subscripts * and @ refer to the array as a whole, and the special
    forms *${#array_name[*]}* and *${#array_name[@]}* yield the number of elements in the array.
* Profiler
** Performance Tools
   [[file:../resources/os/perftools.png]]

** Hardware Info
   - /proc/cpuinfo
   - /proc/meminfo
   - /proc/diskstats
   - ~dmidecode -t~

** CPU
   - ~apt install sysstat~
   - ~vmstat 5 5~: 5 updates; delay between updates is 5 secs
   - ~mpstat -P ALL~
   - ~uptime~
   - ~ps -aux~
   - ~pidstat~
   - *dstat*
   - *perf top*, *perf record*, *perf report*

** Memory
   - /proc/sys/vm/swappiness
   - ~swapon -s~

** Disk IO
   - ~iostat 5 5~
   - ~xdd~
   - ~sar -[ndA]~

** Web Profiler
*** ApacheBench
    #+BEGIN_SRC bash
      ab -c 10 -n 100 http://192.168.0.10:10000/
    #+END_SRC
** Stress Test
   - stress
